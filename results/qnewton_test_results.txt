____________________________
int
____________________________
Variables:
  d::Distributions.Beta{Float64}
  p::Float64
  xs::ANY
  tol::Float64
  T::TYPE{T}
  #s8::Bool
  x::Float64
  #s7::Bool
  ##V#7039::Tuple{Type{Float64}}
  ##fx#7040::Float64
  ##fy#7041::Float64
  ##fy#7042::Float64
  ##fy#7043::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 34:
      NewvarNode(symbol("#s8"))
      GenSym(1) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      GenSym(3) = (Distributions.promote_type)((Distributions._partype)(GenSym(1))::ANY,(Distributions._partype)(GenSym(2))::ANY)::TYPE{T}
      T = (Base.promote_type)(GenSym(3),Float64)::TYPE{T} # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 35:
      ##fx#7040 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7040::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7040::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7040::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7040::Float64)))::Bool)))))) goto 0
      ##fy#7041 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      #s8 = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(p::Float64,##fy#7041::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7041::Float64)::Bool,(Base.lt_float)(##fy#7041::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,##fy#7041::Float64)),1)::Bool))))
      goto 1
      0: 
      #s8 = false
      1: 
      unless #s8::Bool goto 8 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 36:
      NewvarNode(:x)
      NewvarNode(symbol("#s7"))
      unless true goto 3
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 37:
      GenSym(4) = (Distributions.cdf)(d::Distributions.Beta{Float64},xs::UNION{FLOAT64,INT64})::Float64
      GenSym(5) = (Distributions.pdf)(d::Distributions.Beta{Float64},xs::UNION{FLOAT64,INT64})::Float64
      x = xs::UNION{FLOAT64,INT64} + (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p::Float64,GenSym(4))),GenSym(5)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 38:
      GenSym(7) = x::Float64 - xs::UNION{FLOAT64,INT64}::Float64
      GenSym(6) = (Distributions.max)((Base.box)(Base.Float64,(Base.abs_float)(x::Float64)),(Distributions.abs)(xs::UNION{FLOAT64,INT64})::UNION{FLOAT64,INT64})::Float64
      #s7 = (Base.le_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),tol::Float64)),(Base.box)(Base.Float64,(Base.abs_float)(GenSym(7))))::Bool
      unless #s7::Bool goto 6
      goto 7
      6: 
      return x::Float64
      7:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 39:
      xs = x::Float64
      5: 
      unless false goto 4
      3: 
      2: 
      return
      goto 11
      8:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 41:
      ##fy#7042 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7042::Float64)::Bool,(Base.ne_float)(##fy#7042::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7042::Float64))::Bool)) goto 9 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 42:
      return call(T::TYPE{T},0.0)::ANY
      goto 11
      9:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 43:
      ##fy#7043 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7043::Float64)::Bool,(Base.ne_float)(##fy#7043::Float64,9.223372036854776e18)::Bool)),1 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7043::Float64))::Bool)) goto 10 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 44:
      return call(T::TYPE{T},1.0)::ANY
      goto 11
      10:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 46:
      return call(T::TYPE{T},Distributions.NaN)::ANY
      11: 
  end::ANY

____________________________
float32
____________________________
Variables:
  d::Distributions.Beta{Float64}
  p::Float64
  xs::ANY
  tol::Float64
  T::TYPE{T}
  #s8::Bool
  x::Float64
  #s7::Bool
  ##V#7088::Tuple{Type{Float64}}
  ##fx#7089::Float64
  ##fy#7090::Float64
  ##fy#7091::Float64
  ##fy#7092::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 34:
      NewvarNode(symbol("#s8"))
      GenSym(1) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      GenSym(3) = (Distributions.promote_type)((Distributions._partype)(GenSym(1))::ANY,(Distributions._partype)(GenSym(2))::ANY)::TYPE{T}
      T = (Base.promote_type)(GenSym(3),Float64)::TYPE{T} # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 35:
      ##fx#7089 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7089::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7089::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7089::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7089::Float64)))::Bool)))))) goto 0
      ##fy#7090 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      #s8 = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(p::Float64,##fy#7090::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7090::Float64)::Bool,(Base.lt_float)(##fy#7090::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,##fy#7090::Float64)),1)::Bool))))
      goto 1
      0: 
      #s8 = false
      1: 
      unless #s8::Bool goto 8 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 36:
      NewvarNode(:x)
      NewvarNode(symbol("#s7"))
      unless true goto 3
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 37:
      GenSym(4) = (Distributions.cdf)(d::Distributions.Beta{Float64},xs::UNION{FLOAT32,FLOAT64})::Float64
      GenSym(5) = (Distributions.pdf)(d::Distributions.Beta{Float64},xs::UNION{FLOAT32,FLOAT64})::Float64
      x = xs::UNION{FLOAT32,FLOAT64} + (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p::Float64,GenSym(4))),GenSym(5)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 38:
      GenSym(7) = x::Float64 - xs::UNION{FLOAT32,FLOAT64}::Float64
      GenSym(6) = (Distributions.max)((Base.box)(Base.Float64,(Base.abs_float)(x::Float64)),(Distributions.abs)(xs::UNION{FLOAT32,FLOAT64})::UNION{FLOAT32,FLOAT64})::Float64
      #s7 = (Base.le_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),tol::Float64)),(Base.box)(Base.Float64,(Base.abs_float)(GenSym(7))))::Bool
      unless #s7::Bool goto 6
      goto 7
      6: 
      return x::Float64
      7:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 39:
      xs = x::Float64
      5: 
      unless false goto 4
      3: 
      2: 
      return
      goto 11
      8:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 41:
      ##fy#7091 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7091::Float64)::Bool,(Base.ne_float)(##fy#7091::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7091::Float64))::Bool)) goto 9 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 42:
      return call(T::TYPE{T},0.0)::ANY
      goto 11
      9:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 43:
      ##fy#7092 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7092::Float64)::Bool,(Base.ne_float)(##fy#7092::Float64,9.223372036854776e18)::Bool)),1 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7092::Float64))::Bool)) goto 10 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 44:
      return call(T::TYPE{T},1.0)::ANY
      goto 11
      10:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 46:
      return call(T::TYPE{T},Distributions.NaN)::ANY
      11: 
  end::ANY

____________________________
float64
____________________________
Variables:
  d::Distributions.Beta{Float64}
  p::Float64
  xs::Float64
  tol::Float64
  T::TYPE{T}
  #s8::Bool
  x::Float64
  #s7::Bool
  ##V#7095::Tuple{Type{Float64}}
  ##fx#7096::Float64
  ##fy#7097::Float64
  ##fy#7098::Float64
  ##fy#7099::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 34:
      NewvarNode(symbol("#s8"))
      GenSym(1) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      GenSym(3) = (Distributions.promote_type)((Distributions._partype)(GenSym(1))::ANY,(Distributions._partype)(GenSym(2))::ANY)::TYPE{T}
      T = (Base.promote_type)(GenSym(3),Float64)::TYPE{T} # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 35:
      ##fx#7096 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7096::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7096::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7096::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7096::Float64)))::Bool)))))) goto 0
      ##fy#7097 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      #s8 = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(p::Float64,##fy#7097::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7097::Float64)::Bool,(Base.lt_float)(##fy#7097::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,##fy#7097::Float64)),1)::Bool))))
      goto 1
      0: 
      #s8 = false
      1: 
      unless #s8::Bool goto 8 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 36:
      NewvarNode(:x)
      NewvarNode(symbol("#s7"))
      unless true goto 3
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 37:
      GenSym(25) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(26) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(27) = (top(ccall))((top(tuple))("pbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,xs::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(25),0,GenSym(26),0)::Float64
      GenSym(11) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(12) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,xs::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(11),0)::Float64
      GenSym(28) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      x = (Base.box)(Base.Float64,(Base.add_float)(xs::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p::Float64,GenSym(27))),GenSym(28))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 38:
      GenSym(30) = (Base.box)(Base.Float64,(Base.abs_float)(x::Float64))
      GenSym(29) = (Base.box)(Base.Float64,(Base.abs_float)(xs::Float64))
      #s7 = (Base.le_float)((Base.box)(Base.Float64,(Base.mul_float)(((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(30),GenSym(29))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.slt_int)((Base.box)(Int64,GenSym(30)),0)::Bool,(Base.box)(Base.Bool,(Base.not_int)((Base.slt_int)((Base.box)(Int64,GenSym(29)),0)::Bool)))))),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.ne_float)(GenSym(29),GenSym(29))::Bool,GenSym(30),GenSym(29))::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.ne_float)(GenSym(30),GenSym(30))::Bool,GenSym(29),GenSym(30))::Float64)::Float64,tol::Float64)),(Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)(x::Float64,xs::Float64)))))::Bool
      unless #s7::Bool goto 6
      goto 7
      6: 
      return x::Float64
      7:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 39:
      xs = x::Float64
      5: 
      unless false goto 4
      3: 
      2: 
      return
      goto 11
      8:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 41:
      ##fy#7098 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7098::Float64)::Bool,(Base.ne_float)(##fy#7098::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7098::Float64))::Bool)) goto 9 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 42:
      return call(T::TYPE{T},0.0)::ANY
      goto 11
      9:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 43:
      ##fy#7099 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7099::Float64)::Bool,(Base.ne_float)(##fy#7099::Float64,9.223372036854776e18)::Bool)),1 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7099::Float64))::Bool)) goto 10 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 44:
      return call(T::TYPE{T},1.0)::ANY
      goto 11
      10:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 46:
      return call(T::TYPE{T},Distributions.NaN)::ANY
      11: 
  end::ANY

____________________________
dual
____________________________
Variables:
  d::Distributions.Beta{Float64}
  p::Float64
  xs::ForwardDiff.Dual{0,Float64}
  tol::Float64
  T::TYPE{T}
  #s8::Bool
  x::ForwardDiff.Dual{0,Float64}
  #s7::ANY
  ##V#7106::Tuple{Type{Float64}}
  ##fx#7107::Float64
  ##fy#7108::Float64
  _var0::ANY
  _var1::ANY
  ##fy#7109::Float64
  ##fy#7110::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 34:
      NewvarNode(symbol("#s8"))
      GenSym(1) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      GenSym(3) = (Distributions.promote_type)((Distributions._partype)(GenSym(1))::ANY,(Distributions._partype)(GenSym(2))::ANY)::TYPE{T}
      T = (Base.promote_type)(GenSym(3),ForwardDiff.Dual{0,Float64})::TYPE{T} # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 35:
      ##fx#7107 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7107::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7107::Float64,p::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7107::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7107::Float64)))::Bool)))))) goto 0
      ##fy#7108 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      #s8 = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(p::Float64,##fy#7108::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7108::Float64)::Bool,(Base.lt_float)(##fy#7108::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,##fy#7108::Float64)),1)::Bool))))
      goto 1
      0: 
      #s8 = false
      1: 
      unless #s8::Bool goto 8 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 36:
      NewvarNode(:x)
      NewvarNode(symbol("#s7"))
      unless true goto 3
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 37:
      GenSym(12) = (Base.convert)(StatsFuns.Rmath.Cdouble,xs::ForwardDiff.Dual{0,Float64})::ANY
      GenSym(15) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(16) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(17) = (top(ccall))((top(tuple))("pbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,(top(unsafe_convert))(StatsFuns.Rmath.Cdouble,GenSym(12))::ANY,GenSym(12),(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(15),0,GenSym(16),0)::Float64
      GenSym(18) = (StatsFuns.betapdf)((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,(StatsFuns.convert)(StatsFuns.Float64,xs::ForwardDiff.Dual{0,Float64})::ANY)::Float64
      x = $(Expr(:new, ForwardDiff.Dual{0,Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(xs::ForwardDiff.Dual{0,Float64},:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p::Float64,GenSym(17))),GenSym(18)))))), :((top(getfield))(xs::ForwardDiff.Dual{0,Float64},:partials)::ForwardDiff.Partials{0,Float64}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 38:
      GenSym(20) = (Distributions.abs)(call(ForwardDiff.Dual,(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(x::ForwardDiff.Dual{0,Float64},:value)::Float64,(top(getfield))(xs::ForwardDiff.Dual{0,Float64},:value)::Float64)),call(ForwardDiff.Partials,(ForwardDiff.sub_tuples)((top(getfield))((top(getfield))(x::ForwardDiff.Dual{0,Float64},:partials)::ForwardDiff.Partials{0,Float64},:values)::Tuple{},(top(getfield))((top(getfield))(xs::ForwardDiff.Dual{0,Float64},:partials)::ForwardDiff.Partials{0,Float64},:values)::Tuple{})::ANY)::FORWARDDIFF.PARTIALS{N,T})::ANY)::ANY
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(x::ForwardDiff.Dual{0,Float64},:value)::Float64),0)::Bool goto 24
      _var1 = call(ForwardDiff.Dual,(Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(x::ForwardDiff.Dual{0,Float64},:value)::Float64)),call(ForwardDiff.Partials,(ForwardDiff.minus_tuple)((top(getfield))((top(getfield))(x::ForwardDiff.Dual{0,Float64},:partials)::ForwardDiff.Partials{0,Float64},:values)::Tuple{})::ANY)::FORWARDDIFF.PARTIALS{N,T})::ANY
      goto 25
      24: 
      _var1 = x::ForwardDiff.Dual{0,Float64}
      25: 
      GenSym(19) = _var1
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(xs::ForwardDiff.Dual{0,Float64},:value)::Float64),0)::Bool goto 22
      _var0 = call(ForwardDiff.Dual,(Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(xs::ForwardDiff.Dual{0,Float64},:value)::Float64)),call(ForwardDiff.Partials,(ForwardDiff.minus_tuple)((top(getfield))((top(getfield))(xs::ForwardDiff.Dual{0,Float64},:partials)::ForwardDiff.Partials{0,Float64},:values)::Tuple{})::ANY)::FORWARDDIFF.PARTIALS{N,T})::ANY
      goto 23
      22: 
      _var0 = xs::ForwardDiff.Dual{0,Float64}
      23: 
      #s7 = GenSym(20) >= (Distributions.max)(GenSym(19),_var0)::ANY * tol::Float64::ANY::ANY
      unless #s7 goto 6
      goto 7
      6: 
      return x::ForwardDiff.Dual{0,Float64}
      7:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 39:
      xs = x::ForwardDiff.Dual{0,Float64}
      5: 
      unless false goto 4
      3: 
      2: 
      return
      goto 11
      8:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 41:
      ##fy#7109 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7109::Float64)::Bool,(Base.ne_float)(##fy#7109::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7109::Float64))::Bool)) goto 9 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 42:
      return call(T::TYPE{T},0.0)::ANY
      goto 11
      9:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 43:
      ##fy#7110 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p::Float64,##fy#7110::Float64)::Bool,(Base.ne_float)(##fy#7110::Float64,9.223372036854776e18)::Bool)),1 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7110::Float64))::Bool)) goto 10 # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 44:
      return call(T::TYPE{T},1.0)::ANY
      goto 11
      10:  # /Users/mrincredible/.julia/v0.4/Distributions/src/quantilealgs.jl, line 46:
      return call(T::TYPE{T},Distributions.NaN)::ANY
      11: 
  end::ANY

